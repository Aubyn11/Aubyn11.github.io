<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>力扣0001——两数之和</title>
    <url>/2023/11/18/%E5%8A%9B%E6%89%A30001%E2%80%94%E2%80%94%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
    <content><![CDATA[<h1><a href="https://leetcode.cn/problems/two-sum/">两数之和</a></h1>
<p>难度：<strong>简单</strong></p>
<h2 id="题目描述">题目描述</h2>
<p>给定一个整数数组 <code>nums</code> 和一个整数目标值 <code>target</code>，请你在该数组中找出 <strong>和为目标值</strong><code>target</code>的那 <strong>两个</strong> 整数，并返回它们的数组下标。<br>
你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。<br>
你可以按任意顺序返回答案。</p>
<h2 id="示例1">示例1</h2>
<blockquote>
<p><strong>输入</strong>：nums = [2,7,11,15], target = 9<br>
<strong>输出</strong>：[0,1]</p>
</blockquote>
<h2 id="示例2">示例2</h2>
<blockquote>
<p>输入：nums = [3,2,4]，target = 6<br>
输出：[1,2]</p>
</blockquote>
<h2 id="示例3">示例3</h2>
<blockquote>
<p>输入：nums = [3,3]，target = 6<br>
输出：[0,1]</p>
</blockquote>
<h2 id="题解">题解</h2>
<p>直接遍历数组，获取所有的和，找出符合条件的两个数的下标然后直接输出</p>
<h2 id="想法代码">想法代码</h2>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Solution</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params">String[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span>[] nums = &#123; <span class="number">2</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">15</span> &#125;;</span><br><span class="line">        <span class="built_in">int</span> target = <span class="number">9</span>;</span><br><span class="line">        Solution solution = <span class="keyword">new</span> Solution();</span><br><span class="line">        <span class="built_in">int</span>[] ints = solution.TwoSum(nums, target);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="built_in">int</span> x <span class="keyword">in</span> ints)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span>[] <span class="title">TwoSum</span>(<span class="params"><span class="built_in">int</span>[] nums, <span class="built_in">int</span> target</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; nums.Length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> j = i + <span class="number">1</span>; j &lt; nums.Length; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[i] + nums[j] == target)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">int</span>[] &#123; i, j &#125;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> System.Exception(<span class="string">&quot;Failure&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣0002——两数相加</title>
    <url>/2023/11/18/%E5%8A%9B%E6%89%A30002%E2%80%94%E2%80%94%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/</url>
    <content><![CDATA[<h1><a href="https://leetcode.cn/problems/add-two-numbers/">两数相加</a></h1>
<p>难度：<strong>中等</strong></p>
<h2 id="题目描述">题目描述</h2>
<p>给你两个 <strong>非空</strong> 的链表，表示两个非负的整数。它们每位数字都是按照 <strong>逆序</strong> 的方式存储的，并且每个节点只能存储 <strong>一位</strong> 数字。<br>
请你将两个数相加，并以相同形式返回一个表示和的链表。<br>
你可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p>
<h2 id="示例1">示例1</h2>
<p><img src="/images/ltc0002_1.jpg" alt="图片示例"></p>
<blockquote>
<p><strong>输入</strong>：l1 = [2,4,3], l2 = [5,6,4]<br>
<strong>输出</strong>：[7,0,8]</p>
</blockquote>
<h2 id="示例2">示例2</h2>
<blockquote>
<p><strong>输入</strong>：l1 = [0], l2 = [0]<br>
<strong>输出</strong>：[0]</p>
</blockquote>
<h2 id="示例3">示例3</h2>
<blockquote>
<p><strong>输入</strong>：l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]<br>
<strong>输出</strong>：[8,9,9,9,0,0,0,1]</p>
</blockquote>
<h2 id="题解">题解</h2>
<p>因为两个链表中的数都是逆序排列的，所以两个链表中的数字可以直接相加，如果两个链表的长度不同，则可以认为长度短的链表的后面跟了若干个 0<br>
逐位求和并与当前的进位值相加</p>
<h2 id="想法代码">想法代码</h2>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ListNode</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> val;</span><br><span class="line">    <span class="keyword">public</span> ListNode next;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ListNode</span>(<span class="params"><span class="built_in">int</span> val = <span class="number">0</span>, ListNode next = <span class="literal">null</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.val = val; </span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Solution</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        ListNode l1 = <span class="keyword">new</span> ListNode(<span class="number">2</span>);</span><br><span class="line">        l1.next = <span class="keyword">new</span> ListNode(<span class="number">4</span>);</span><br><span class="line">        l1.next.next = <span class="keyword">new</span> ListNode(<span class="number">3</span>);</span><br><span class="line">        ListNode l2 = <span class="keyword">new</span> ListNode(<span class="number">5</span>);</span><br><span class="line">        l2.next = <span class="keyword">new</span> ListNode(<span class="number">6</span>);</span><br><span class="line">        l2.next.next = <span class="keyword">new</span> ListNode(<span class="number">4</span>);</span><br><span class="line">        ListNode l3 = <span class="keyword">new</span> ListNode();</span><br><span class="line">        l3 = AddTwoNumbers(l1, l2);</span><br><span class="line">        ListNode tail = l3;</span><br><span class="line">        <span class="keyword">while</span> (tail != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(tail.val);</span><br><span class="line">            tail = tail.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title">AddTwoNumbers</span>(<span class="params">ListNode l1, ListNode l2</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        ListNode head = <span class="literal">null</span>, tail = <span class="literal">null</span>;</span><br><span class="line">        <span class="built_in">int</span> carry = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (l1 != <span class="literal">null</span> || l2 != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> n1 = l1 != <span class="literal">null</span> ? l1.val : <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">int</span> n2 = l2 != <span class="literal">null</span> ? l2.val : <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">int</span> sum = n1 + n2 + carry;</span><br><span class="line">            <span class="keyword">if</span> (head == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                head = tail = <span class="keyword">new</span> ListNode(sum % <span class="number">10</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                tail.next = <span class="keyword">new</span> ListNode(sum % <span class="number">10</span>);</span><br><span class="line">                tail = tail.next;</span><br><span class="line">            &#125;</span><br><span class="line">            carry = sum / <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span> (l1 != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                l1 = l1.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (l2 != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                l2 = l2.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (carry &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            tail.next = <span class="keyword">new</span> ListNode(carry);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣0003——无重复字符的最长字串</title>
    <url>/2023/11/18/%E5%8A%9B%E6%89%A30003%E2%80%94%E2%80%94%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%97%E4%B8%B2/</url>
    <content><![CDATA[<h1><a href="https://leetcode.cn/problems/longest-substring-without-repeating-characters/">无重复字符的最长子串</a></h1>
<p>难度：<strong>中等</strong></p>
<h2 id="题目描述">题目描述</h2>
<p>给定一个字符串 <code>s</code> ，请你找出其中不含有重复字符的 <strong>最长子串</strong> 的长度。</p>
<h2 id="示例1">示例1</h2>
<blockquote>
<p><strong>输入</strong>：s = “abcabcbb”<br>
<strong>输出</strong>：3</p>
</blockquote>
<h2 id="示例2">示例2</h2>
<blockquote>
<p><strong>输入</strong>：s = “bbbbb”<br>
<strong>输出</strong>：1</p>
</blockquote>
<h2 id="示例3">示例3</h2>
<blockquote>
<p><strong>输入</strong>：s = “pwwkew”<br>
<strong>输出</strong>：3</p>
</blockquote>
<h2 id="题解">题解</h2>
<p>定义哈希集合，记录每一个字符是否出现过，然后根据两个指针<code>left</code>，<code>right</code>的移动来对整个字符串来进行窗口移动</p>
<h2 id="想法代码">想法代码</h2>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Solution</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params">String[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> s = <span class="string">&quot;pwwkew&quot;</span>;</span><br><span class="line">        <span class="built_in">int</span> max = LengthOfLongestSubstring(s);</span><br><span class="line">        Console.WriteLine(max);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> <span class="title">LengthOfLongestSubstring</span>(<span class="params"><span class="built_in">string</span> s</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        HashSet&lt;<span class="built_in">char</span>&gt; letter = <span class="keyword">new</span> HashSet&lt;<span class="built_in">char</span>&gt;();</span><br><span class="line">        <span class="built_in">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">int</span> length = s.Length;</span><br><span class="line">        <span class="built_in">int</span> count = <span class="number">0</span>, max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (right &lt; length)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!letter.Contains(s[right]))</span><br><span class="line">            &#123;</span><br><span class="line">                letter.Add(s[right]);</span><br><span class="line">                right++;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                letter.Remove(s[left]);</span><br><span class="line">                left++;</span><br><span class="line">                count--;</span><br><span class="line">            &#125;</span><br><span class="line">            max = Math.Max(max, count);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣0004——寻找两个正序数组的中位数</title>
    <url>/2023/11/18/%E5%8A%9B%E6%89%A30004%E2%80%94%E2%80%94%E5%AF%BB%E6%89%BE%E4%B8%A4%E4%B8%AA%E6%AD%A3%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0/</url>
    <content><![CDATA[<h1><a href="https://leetcode.cn/problems/median-of-two-sorted-arrays/">寻找两个正序数组的中位数</a>难度：<strong>困难</strong></h1>
<h2 id="题目描述">题目描述</h2>
<p>给定两个大小分别为 <code>m</code> 和 <code>n</code> 的正序（从小到大）数组 <code>nums1</code> 和 <code>nums2</code>。请你找出并返回这两个正序数组的 <strong>中位数</strong> 。<br>
算法的时间复杂度应该为 <code>O(log (m+n))</code> 。</p>
<h2 id="示例1">示例1</h2>
<blockquote>
<p><strong>输入</strong>：nums1 = [1,3], nums2 = [2]<br>
<strong>输出</strong>：2.00000</p>
</blockquote>
<h2 id="示例2">示例2</h2>
<blockquote>
<p><strong>输入</strong>：nums1 = [1,2], nums2 = [3,4]<br>
<strong>输入</strong>：2.50000</p>
</blockquote>
<h2 id="题解">题解</h2>
<p>将两个数组合并到一个<code>List</code>表中，通过<code>Sort</code>来对它进行排序，并获得两个数组的长度的和<code>len</code>，如果和为奇数就可以直接返回<code>List</code>中的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi><mi>e</mi><mi>n</mi><mi mathvariant="normal">/</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">len / 2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord">/</span><span class="mord">2</span></span></span></span> 的值，如果为偶数，就返回<code>List</code>中 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi><mi>e</mi><mi>n</mi><mi mathvariant="normal">/</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">len / 2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord">/</span><span class="mord">2</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi><mi>e</mi><mi>n</mi><mi mathvariant="normal">/</mi><mn>2</mn><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">len / 2 + 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord">/</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 的和的平均值</p>
<h2 id="想法代码">想法代码</h2>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span>[] nums1 = &#123; <span class="number">1</span>, <span class="number">2</span> &#125;;</span><br><span class="line">        <span class="built_in">int</span>[] nums2 = &#123; <span class="number">3</span>, <span class="number">4</span> &#125;;</span><br><span class="line">        Console.WriteLine(FindMedianSortedArrays(nums1,nums2));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">double</span> <span class="title">FindMedianSortedArrays</span>(<span class="params"><span class="built_in">int</span>[] nums1, <span class="built_in">int</span>[] nums2</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> m = nums1.Length;</span><br><span class="line">        <span class="built_in">int</span> n = nums2.Length;</span><br><span class="line">        <span class="built_in">int</span> len = m + n;</span><br><span class="line">        <span class="keyword">var</span> resultIndex = len / <span class="number">2</span>;</span><br><span class="line">        List&lt;<span class="built_in">int</span>&gt; list = <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;(nums1);</span><br><span class="line">        list.AddRange(nums2);</span><br><span class="line">        list.Sort();</span><br><span class="line">        <span class="keyword">if</span> (len % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> (list[resultIndex - <span class="number">1</span>] + list[resultIndex]) / <span class="number">2.0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> list[resultIndex];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣0005——最长回文子串</title>
    <url>/2023/11/18/%E5%8A%9B%E6%89%A30005%E2%80%94%E2%80%94%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/</url>
    <content><![CDATA[<h1><a href="https://leetcode.cn/problems/longest-palindromic-substring/">最长回文子串</a></h1>
<p>难度：<strong>中等</strong></p>
<h2 id="题目描述">题目描述</h2>
<p>给你一个字符串 <code>s</code>，找到 <code>s</code> 中最长的回文子串。<br>
如果字符串的反序与原始字符串相同，则该字符串称为回文字符串。</p>
<h2 id="示例1">示例1</h2>
<blockquote>
<p><strong>输入</strong>：s = “babad”<br>
<strong>输出</strong>：“bab”</p>
</blockquote>
<h2 id="示例2">示例2</h2>
<blockquote>
<p><strong>输入</strong>：s = “cbbd”<br>
<strong>输出</strong>：“bb”</p>
</blockquote>
<h2 id="题解">题解</h2>
<p>滑动窗口法，遍历每一个字符，每次遍历用<code>left</code>和<code>right</code>来记录当前窗口然后向右滑动知道超出数组或者和下标数不相等就停止，最后向两边滑动窗口判断回文，直到不相等或超过边界。记录最长的子串</p>
<h2 id="想法代码">想法代码</h2>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Solution</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params">String[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> s = <span class="string">&quot;babad&quot;</span>;</span><br><span class="line">        Console.WriteLine(LongestPaildrome(s));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">LongestPaildrome</span>(<span class="params"><span class="built_in">string</span> s</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> left;</span><br><span class="line">        <span class="built_in">int</span> right;</span><br><span class="line">        <span class="built_in">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">int</span> count;</span><br><span class="line">        <span class="built_in">int</span> max = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">int</span> resultleft = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (index &lt; s.Length)</span><br><span class="line">        &#123;</span><br><span class="line">            right = left = index;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                right++;</span><br><span class="line">                <span class="keyword">if</span> (right &gt;= s.Length || s[right] != s[left])</span><br><span class="line">                &#123;</span><br><span class="line">                    right--;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                right++;</span><br><span class="line">                left--;</span><br><span class="line">                <span class="keyword">if</span> (left &lt; <span class="number">0</span> || right &gt;= s.Length || s[left] != s[right])</span><br><span class="line">                &#123;</span><br><span class="line">                    left++;</span><br><span class="line">                    right--;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            count = right - left + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (max &lt; count)</span><br><span class="line">            &#123;</span><br><span class="line">                max = count;</span><br><span class="line">                resultleft = left;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s.Substring(resultleft, max);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣0006——N字形变换</title>
    <url>/2023/11/18/%E5%8A%9B%E6%89%A30006%E2%80%94%E2%80%94N%E5%AD%97%E5%BD%A2%E5%8F%98%E6%8D%A2/</url>
    <content><![CDATA[<h1><a href="https://leetcode.cn/problems/zigzag-conversion/">N字形变换</a></h1>
<p>难度：<strong>中等</strong></p>
<h2 id="题目描述">题目描述</h2>
<p>将一个给定字符串 <code>s</code> 根据给定的行数 <code>numRows</code> ，以从上往下、从左到右进行 Z 字形排列。<br>
比如输入字符串为 <code>&quot;PAYPALISHIRING&quot;</code> 行数为 <code>3</code> 时，排列如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">P   A   H   N</span><br><span class="line">A P L S I I G</span><br><span class="line">Y   I   R</span><br></pre></td></tr></table></figure>
<p>之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如：<code>&quot;PAHNAPLSIIGYIR&quot;</code>。<br>
请你实现这个将字符串进行指定行数变换的函数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">string convert(string s, int numRows);</span><br></pre></td></tr></table></figure>
<h2 id="示例1">示例1</h2>
<blockquote>
<p><strong>输入</strong>：s = “PAYPALISHIRING”, numRows = 3<br>
<strong>输出</strong>：“PAHNAPLSIIGYIR”</p>
</blockquote>
<h2 id="示例2">示例2</h2>
<blockquote>
<p><strong>输入</strong>：s = “PAYPALISHIRING”, numRows = 4<br>
<strong>输出</strong>：“PINALSIGYAHRPI”</p>
</blockquote>
<h2 id="示例3">示例3</h2>
<blockquote>
<p><strong>输入</strong>：s = “A”, numRows = 1<br>
<strong>输出</strong>：“A”</p>
</blockquote>
<h2 id="题解">题解</h2>
<p>对每一个字符进行标记，将所得的字符所对应的行数记录到一个数组中，创建一个字典，对每一行存储的字符串进行拼接，之后输出</p>
<h2 id="想法代码">想法代码</h2>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Solution</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params">String[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> s = <span class="string">&quot;PAYPALISHIRING&quot;</span>;</span><br><span class="line">        Console.WriteLine(Convert(s,<span class="number">3</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">Convert</span>(<span class="params"><span class="built_in">string</span> s, <span class="built_in">int</span> numRows</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> len = s.Length;</span><br><span class="line">        <span class="built_in">int</span>[] row = <span class="keyword">new</span> <span class="built_in">int</span>[len];</span><br><span class="line">        <span class="built_in">int</span> k = <span class="number">1</span>, f = <span class="number">1</span>, cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (cnt &lt; len)</span><br><span class="line">        &#123;</span><br><span class="line">            row[cnt++] = k;</span><br><span class="line">            k += f;</span><br><span class="line">            <span class="keyword">if</span> (k == <span class="number">1</span> || k == numRows) f *= <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Dictionary&lt;<span class="built_in">int</span>, StringBuilder&gt; map = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">int</span>, StringBuilder&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!map.ContainsKey(row[i]))</span><br><span class="line">            &#123;</span><br><span class="line">                map.Add(row[i], <span class="keyword">new</span> StringBuilder(<span class="string">&quot;&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            map[row[i]].Append(s[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        StringBuilder ans = <span class="keyword">new</span> StringBuilder(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> i <span class="keyword">in</span> map)</span><br><span class="line">        &#123;</span><br><span class="line">            ans.Append(i.Value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans.ToString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣0007——整数反转</title>
    <url>/2023/11/18/%E5%8A%9B%E6%89%A30007%E2%80%94%E2%80%94%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/</url>
    <content><![CDATA[<h1><a href="https://leetcode.cn/problems/reverse-integer/">整数反转</a></h1>
<p>难度：<strong>中等</strong></p>
<h2 id="题目描述">题目描述</h2>
<p>给你一个 32 位的有符号整数 <code>x</code> ，返回将 <code>x</code> 中的数字部分反转后的结果。<br>
如果反转后整数超过 32 位的有符号整数的范围 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mtext>−</mtext><msup><mn>2</mn><mn>31</mn></msup><mo separator="true">,</mo><msup><mn>2</mn><mn>31</mn></msup><mtext>−</mtext><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[−2^{31}, 2^{31}− 1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mord">−</span><span class="mord">1</span><span class="mclose">]</span></span></span></span> ，就返回 0。<br>
<strong>假设环境不允许存储 64 位整数（有符号或无符号）。</strong></p>
<h2 id="示例1">示例1</h2>
<blockquote>
<p><strong>输入</strong>：x = 123<br>
<strong>输出</strong>：321</p>
</blockquote>
<h2 id="示例2">示例2</h2>
<blockquote>
<p><strong>输入</strong>：x = -123<br>
<strong>输出</strong>：-321</p>
</blockquote>
<h2 id="示例3">示例3</h2>
<blockquote>
<p><strong>输入</strong>：x = 120<br>
<strong>输出</strong>：21</p>
</blockquote>
<h2 id="示例4">示例4</h2>
<blockquote>
<p><strong>输入</strong>：x = 0<br>
<strong>输出</strong>：0</p>
</blockquote>
<h2 id="题解">题解</h2>
<p>先定义两个常量，一个最大<code>MAX</code>，一个最小<code>MIN</code>，因为要反转，所以要判断是否会越界，最大值为<code>2147483647</code>，最小值为<code>-2147483648</code>，所以当反转的时候要注意不要越界</p>
<h2 id="想法代码">想法代码</h2>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">int</span> MAX = <span class="built_in">int</span>.MaxValue / <span class="number">10</span>, MIN = <span class="built_in">int</span>.MinValue / <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> x = <span class="number">4321</span>;</span><br><span class="line">        Console.WriteLine(Reverse(x));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> <span class="title">Reverse</span>(<span class="params"><span class="built_in">int</span> x</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> reversed = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (x != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> lastDigit = x % <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span> (reversed &gt; MAX || reversed &lt; MIN)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (reversed == MAX &amp;&amp; lastDigit &gt; <span class="number">7</span> || reversed == MIN &amp;&amp; lastDigit &lt; <span class="number">-8</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            reversed = reversed * <span class="number">10</span> + lastDigit;</span><br><span class="line">            x /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> reversed;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣0008——字符串转换整数</title>
    <url>/2023/11/18/%E5%8A%9B%E6%89%A30008%E2%80%94%E2%80%94%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2%E6%95%B4%E6%95%B0/</url>
    <content><![CDATA[<h1><a href="https://leetcode.cn/problems/string-to-integer-atoi/">字符串转换整数</a></h1>
<p>难度：<strong>中等</strong></p>
<h2 id="题目描述">题目描述</h2>
<p>请你来实现一个 <code>myAtoi(string s)</code> 函数，使其能将字符串转换成一个 32 位有符号整数（类似 C/C++ 中的 <code>atoi</code> 函数）。<br>
函数 <code>myAtoi(string s)</code> 的算法如下：</p>
<ol>
<li>读入字符串并丢弃无用的前导空格</li>
<li>检查下一个字符（假设还未到字符末尾）为正还是负号，读取该字符（如果有）。 确定最终结果是负数还是正数。 如果两者都不存在，则假定结果为正。</li>
<li>读入下一个字符，直到到达下一个非数字字符或到达输入的结尾。字符串的其余部分将被忽略。</li>
<li>将前面步骤读入的这些数字转换为整数（即，“123” -&gt; 123， “0032” -&gt; 32）。如果没有读入数字，则整数为 <code>0</code> 。必要时更改符号（从步骤 2 开始）。</li>
<li>如果整数数超过 32 位有符号整数范围 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mtext>−</mtext><msup><mn>2</mn><mn>31</mn></msup><mo separator="true">,</mo><msup><mn>2</mn><mn>31</mn></msup><mtext>−</mtext><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[−2^{31}, 2^{31}− 1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mord">−</span><span class="mord">1</span><span class="mclose">]</span></span></span></span> ，需要截断这个整数，使其保持在这个范围内。具体来说，小于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>−</mtext><msup><mn>2</mn><mn>31</mn></msup></mrow><annotation encoding="application/x-tex">−2^{31}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span> 的整数应该被固定为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>−</mtext><msup><mn>2</mn><mn>31</mn></msup></mrow><annotation encoding="application/x-tex">−2^{31}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span> ，大于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>31</mn></msup><mtext>−</mtext><mn>1</mn></mrow><annotation encoding="application/x-tex">2^{31}− 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mord">−</span><span class="mord">1</span></span></span></span> 的整数应该被固定为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>31</mn></msup><mtext>−</mtext><mn>1</mn></mrow><annotation encoding="application/x-tex">2^{31}− 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mord">−</span><span class="mord">1</span></span></span></span> 。</li>
<li>返回整数作为最终结果。</li>
</ol>
<p><strong>注意：</strong></p>
<ul>
<li>本题中的空白字符只包括空格字符 <code>' '</code> 。</li>
<li>除前导空格或数字后的其余字符串外，<strong>请勿忽略</strong> 任何其他字符。</li>
</ul>
<h2 id="示例1">示例1</h2>
<blockquote>
<p><strong>输入</strong>：s = &quot;   -42&quot;<br>
<strong>输出</strong>：-42</p>
</blockquote>
<h2 id="示例2">示例2</h2>
<blockquote>
<p><strong>输入</strong>：s = “42”<br>
<strong>输出</strong>：42</p>
</blockquote>
<h2 id="示例3">示例3</h2>
<blockquote>
<p><strong>输入</strong>：s = “4193 with words”<br>
<strong>输出</strong>：4193</p>
</blockquote>
<h2 id="题解">题解</h2>
<p>先遍历字符，将空格过滤，之后判断是否将字符串遍历完，如果遍历到最后一位，则返回0。如果没有遍历完，就继续像下面比对，若没有数字，则返回0。如果有数字，则对它进行进位运算，如果之后有最大值上越界，则返回<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>31</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^{31}-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，若下越界，则返回 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><msup><mn>2</mn><mn>31</mn></msup></mrow><annotation encoding="application/x-tex">- 2^{31}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span>，如果没有，则可以直接计算后返回</p>
<h2 id="想法代码">想法代码</h2>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Solution</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params">String[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> s = <span class="string">&quot;4193 with words&quot;</span>;</span><br><span class="line">        Console.WriteLine(MyAtoi(s));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> <span class="title">MyAtoi</span>(<span class="params"><span class="built_in">string</span> s</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> length = s.Length;</span><br><span class="line">        <span class="built_in">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (index &lt; length &amp;&amp; s[index] == <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (index == length)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">int</span> sign = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (s[index] == <span class="string">&#x27;+&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (s[index] == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            sign = <span class="number">-1</span>;</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> <span class="built_in">int</span> MAX = <span class="built_in">int</span>.MaxValue / <span class="number">10</span>;</span><br><span class="line">        <span class="built_in">int</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (index &lt; length &amp;&amp; <span class="built_in">char</span>.IsDigit(s[index]))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> digit = s[index] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span> (num &gt; MAX || num &lt; -MAX)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> sign &gt; <span class="number">0</span> ? <span class="built_in">int</span>.MaxValue : <span class="built_in">int</span>.MinValue;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (num == MAX)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (sign &gt; <span class="number">0</span> &amp;&amp; digit &gt; <span class="number">7</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="built_in">int</span>.MaxValue;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (sign &lt; <span class="number">0</span> &amp;&amp; digit &gt; <span class="number">8</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="built_in">int</span>.MinValue;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            num = num * <span class="number">10</span> + digit;</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> num * sign;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣0009——回文数</title>
    <url>/2023/11/18/%E5%8A%9B%E6%89%A30009%E2%80%94%E2%80%94%E5%9B%9E%E6%96%87%E6%95%B0/</url>
    <content><![CDATA[<h1><a href="https://leetcode.cn/problems/palindrome-number/">回文数</a></h1>
<p>难度：<strong>简单</strong></p>
<h2 id="题目描述">题目描述</h2>
<p>给你一个整数 <code>x</code> ，如果 <code>x</code> 是一个回文整数，返回 <code>true</code> ；否则，返回 <code>false</code> 。<br>
回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</p>
<ul>
<li>例如，<code>121</code> 是回文，而 <code>123</code> 不是。</li>
</ul>
<h2 id="示例1">示例1</h2>
<blockquote>
<p><strong>输入</strong>：x = 121<br>
<strong>输出</strong>：true</p>
</blockquote>
<h2 id="示例2">示例2</h2>
<blockquote>
<p><strong>输入</strong>：x = -121<br>
<strong>输出</strong>：false</p>
</blockquote>
<h2 id="示例3">示例3</h2>
<blockquote>
<p><strong>输入</strong>：x = 10<br>
<strong>输出</strong>：false</p>
</blockquote>
<h2 id="题解">题解</h2>
<p>对这个数先进行判断，如果这个数是小于0或者末尾为零（不包括0）的数，那么直接返回false，如果为其他的数，就可以正常按照倒序，然后比对是否为回文</p>
<h2 id="想法代码">想法代码</h2>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Solution</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params">String[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> x = <span class="number">121</span>;</span><br><span class="line">        Console.WriteLine(IsPalindrome(x));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">IsPalindrome</span>(<span class="params"><span class="built_in">int</span> x</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span> || (x % <span class="number">10</span>) == <span class="number">0</span> &amp;&amp; x !=<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">int</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (x &gt; num)</span><br><span class="line">        &#123;</span><br><span class="line">            num = num * <span class="number">10</span> + x % <span class="number">10</span>;</span><br><span class="line">            x /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> x == num || x == num / <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣0010——正则表达式匹配</title>
    <url>/2023/11/18/%E5%8A%9B%E6%89%A30010%E2%80%94%E2%80%94%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8C%B9%E9%85%8D/</url>
    <content><![CDATA[<h1><a href="https://leetcode.cn/problems/regular-expression-matching/">正则表达式匹配</a></h1>
<p>难度：<strong>困难</strong></p>
<h2 id="题目要求">题目要求</h2>
<p>给你一个字符串 <code>s</code> 和一个字符规律 <code>p</code>，请你来实现一个支持 <code>'.'</code> 和 <code>'*'</code> 的正则表达式匹配。</p>
<ul>
<li><code>'.'</code> 匹配任意单个字符</li>
<li><code>'*'</code> 匹配零个或多个前面的那一个元素</li>
</ul>
<p>所谓匹配，是要涵盖<strong>整个</strong>字符串 <code>s</code>的，而不是部分字符串。</p>
<h2 id="示例1">示例1</h2>
<blockquote>
<p><strong>输入</strong>：s = “aa”, p = “a”<br>
<strong>输出</strong>：false</p>
</blockquote>
<h2 id="示例2">示例2</h2>
<blockquote>
<p><strong>输入</strong>：s = “aa”, p = “a*”<br>
<strong>输出</strong>：true</p>
</blockquote>
<h2 id="示例3">示例3</h2>
<blockquote>
<p><strong>输入</strong>：s = “ab”, p = “.*”<br>
<strong>输出</strong>：true</p>
</blockquote>
<h2 id="题解">题解</h2>
<p><img src="/images/ltc_0010_1.png" alt="图片来自于LeetCode题解"></p>
<p>分析以上表table： s串为 “abbbc&quot;在图的最左侧一列， p串为&quot;abbc” 在图的上面一行。</p>
<p>红色对勾表示true, table[0,0] 为true，表示s[0:0]=“a” 与 p[0:0]=“a” 是匹配；table[4,4]为true，表示s[0:4]=“abbbc” 与p[0:4]=“ab<em>bc&quot;是匹配的; table[4,6] 为 true 则表示 s[0:4]=“abbbc” 与 p[0,6]= &quot;ab</em>bc*.” 是匹配的 。即table[i,j]为true，表示s[0:i]与p[0:j] 是匹配的.</p>
<p>table[0,0]=true表示s与p是匹配的，而且在table种我们可以得到一条通路from右下角to左上角（忽略2个星列），这条通路的走向有3种：</p>
<ol>
<li>格星左跳一位，例如table[4,6]到table[4,4],  【A】</li>
<li>向上走一位，例如tble[3,1]到table[2,1], 【B】</li>
<li>向左上走一位，例如 table[1,1]到 table[0,0] , 【C】</li>
</ol>
<p>这三种走向可以与方法二的回溯法种的ABC三个递归分支分别对应，而求解table的方法也与回溯法类似，但相比回溯法，多了一个table用做备忘录，避免重复计算。</p>
<p>计算上面table每个格子的值时，先令 table[5,7]=true ，并依次计算格子值，最终若table[0,0]=true，则表示s与p匹配。</p>
<h2 id="想法代码">想法代码</h2>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Solution</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params">String[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> s = <span class="string">&quot;aa&quot;</span>;</span><br><span class="line">        <span class="built_in">string</span> p = <span class="string">&quot;a*&quot;</span>;</span><br><span class="line">        Console.WriteLine(IsMatch(s,p));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">IsMatch</span>(<span class="params"><span class="built_in">string</span> s, <span class="built_in">string</span> p</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">bool</span>[,] dp = <span class="keyword">new</span> <span class="built_in">bool</span>[s.Length + <span class="number">1</span>, p.Length + <span class="number">1</span>];</span><br><span class="line">        dp[s.Length, p.Length] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = s.Length; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> j = p.Length - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">bool</span> first_macth = (i &lt; s.Length &amp;&amp; (p[j] == s[i] || p[j] == <span class="string">&#x27;.&#x27;</span>));</span><br><span class="line">                <span class="keyword">if</span> (j + <span class="number">1</span> &lt; p.Length &amp;&amp; p[j + <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    dp[i, j] = dp[i, j + <span class="number">2</span>] || first_macth &amp;&amp; dp[i + <span class="number">1</span>, j];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    dp[i, j] = first_macth &amp;&amp; dp[i + <span class="number">1</span>, j + <span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">0</span>, <span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣0011——盛最多水的容器</title>
    <url>/2023/11/19/%E5%8A%9B%E6%89%A30011%E2%80%94%E2%80%94%E7%9B%9B%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8/</url>
    <content><![CDATA[<h1><a href="https://leetcode.cn/problems/container-with-most-water/">盛最多水的容器</a></h1>
<p>难度：<strong>中等</strong></p>
<h2 id="题目描述">题目描述</h2>
<p>给定一个长度为 <code>n</code> 的整数数组 <code>height</code> 。有 <code>n</code> 条垂线，第 <code>i</code> 条线的两个端点是 <code>(i, 0)</code> 和 <code>(i, height[i])</code> 。<br>
找出其中的两条线，使得它们与 <code>x</code> 轴共同构成的容器可以容纳最多的水。<br>
返回容器可以储存的最大水量。<br>
**说明：**你不能倾斜容器。</p>
<h2 id="示例1">示例1</h2>
<p><img src="/images/ltc0011_1.jpg" alt="图示"></p>
<blockquote>
<p><strong>输入</strong>：[1,8,6,2,5,4,8,3,7]<br>
<strong>输出</strong>：49</p>
</blockquote>
<h2 id="示例2">示例2</h2>
<blockquote>
<p><strong>输入</strong>：height = [1,1]<br>
<strong>输出</strong>：1</p>
</blockquote>
<h2 id="题解">题解</h2>
<p>用两个指针直接指向两个边界，循环，进行两个边界的对比，取最小值然后乘以长度，得出面积，如果右边高度比左边高度要高，那么左边的下标加一，反之则是右边下标减一</p>
<h2 id="想法代码">想法代码</h2>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    public <span class="type">static</span> <span class="type">void</span> <span class="title function_">Main</span><span class="params">(<span class="built_in">string</span>[] args)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span>[] height = &#123; <span class="number">1</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">7</span> &#125;;</span><br><span class="line">        Console.WriteLine(MaxArea(height));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="type">static</span> <span class="type">int</span> <span class="title function_">MaxArea</span><span class="params">(<span class="type">int</span>[] height)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> max = <span class="number">0</span>, i = <span class="number">0</span>, j = height.Length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j)</span><br><span class="line">        &#123;</span><br><span class="line">            max = Math.Max((j - i) * Math.Min(height[j], height[i]), max);</span><br><span class="line">            <span class="keyword">if</span> (height[j] &gt; height[i])</span><br><span class="line">                i++;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                j--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣0012——整数转罗马数字</title>
    <url>/2023/11/19/%E5%8A%9B%E6%89%A30012%E2%80%94%E2%80%94%E6%95%B4%E6%95%B0%E8%BD%AC%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97/</url>
    <content><![CDATA[<h1><a href="https://leetcode.cn/problems/integer-to-roman/">整数转罗马数字</a></h1>
<p>难度：<strong>中等</strong></p>
<h2 id="题目描述">题目描述</h2>
<p>罗马数字包含以下七种字符： <code>I</code>， <code>V</code>， <code>X</code>， <code>L</code>，<code>C</code>，<code>D</code> 和 <code>M</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">字符          数值</span><br><span class="line">I             1</span><br><span class="line">V             5</span><br><span class="line">X             10</span><br><span class="line">L             50</span><br><span class="line">C             100</span><br><span class="line">D             500</span><br><span class="line">M             1000</span><br></pre></td></tr></table></figure>
<p>例如， 罗马数字 2 写做 <code>II</code> ，即为两个并列的 1。12 写做 <code>XII</code> ，即为 <code>X</code> + <code>II</code> 。 27 写做  <code>XXVII</code>, 即为 <code>XX</code> + <code>V</code> + <code>II</code> 。<br>
通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 <code>IIII</code>，而是 <code>IV</code>。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 <code>IX</code>。这个特殊的规则只适用于以下六种情况：</p>
<ul>
<li><code>I</code> 可以放在 <code>V</code> (5) 和 <code>X</code> (10) 的左边，来表示 4 和 9。</li>
<li><code>X</code> 可以放在 <code>L</code> (50) 和 <code>C</code> (100) 的左边，来表示 40 和 90。</li>
<li><code>C</code> 可以放在 <code>D</code> (500) 和 <code>M</code> (1000) 的左边，来表示 400 和 900。</li>
</ul>
<p>给你一个整数，将其转为罗马数字。</p>
<h2 id="示例1">示例1</h2>
<blockquote>
<p><strong>输入</strong>：num = 3<br>
<strong>输出</strong>：“III”</p>
</blockquote>
<h2 id="示例2">示例2</h2>
<blockquote>
<p><strong>输入</strong>：num = 4<br>
<strong>输出</strong>：“IV”</p>
</blockquote>
<h2 id="示例3">示例3</h2>
<blockquote>
<p><strong>输入</strong>：num = 9<br>
<strong>输出</strong>：“IX”</p>
</blockquote>
<h2 id="示例4">示例4</h2>
<blockquote>
<p><strong>输入</strong>：num = 58<br>
<strong>输出</strong>：“LVIII”</p>
</blockquote>
<h2 id="示例5">示例5</h2>
<blockquote>
<p><strong>输入</strong>：num = 1994<br>
<strong>输出</strong>：“MCMXCIV”</p>
</blockquote>
<h2 id="题解">题解</h2>
<p>使用贪心算法，将每种情况存入到字典中，然后对当前数字进行遍历，如果当前字典索引中的值小于所给的整数，那么就将这个字符添加到StringBuilder中去，并将整数减去当前字典索引中的值，如此循环，直到最后所给数字为0</p>
<h2 id="想法代码">想法代码</h2>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Solution</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params">String[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> num = <span class="number">1994</span>;</span><br><span class="line">        Console.WriteLine(IntToRoman(num));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">IntToRoman</span>(<span class="params"><span class="built_in">int</span> num</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        Dictionary&lt;<span class="built_in">string</span>,<span class="built_in">int</span>&gt; dic = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>,<span class="built_in">int</span>&gt;();</span><br><span class="line">        dic.Add(<span class="string">&quot;M&quot;</span>, <span class="number">1000</span>);</span><br><span class="line">        dic.Add(<span class="string">&quot;CM&quot;</span>, <span class="number">900</span>);</span><br><span class="line">        dic.Add(<span class="string">&quot;D&quot;</span>, <span class="number">500</span>);</span><br><span class="line">        dic.Add(<span class="string">&quot;CD&quot;</span>, <span class="number">400</span>);</span><br><span class="line">        dic.Add(<span class="string">&quot;C&quot;</span>, <span class="number">100</span>);</span><br><span class="line">        dic.Add(<span class="string">&quot;XC&quot;</span>, <span class="number">90</span>);</span><br><span class="line">        dic.Add(<span class="string">&quot;L&quot;</span>, <span class="number">50</span>);</span><br><span class="line">        dic.Add(<span class="string">&quot;XL&quot;</span>, <span class="number">40</span>);</span><br><span class="line">        dic.Add(<span class="string">&quot;X&quot;</span>, <span class="number">10</span>);</span><br><span class="line">        dic.Add(<span class="string">&quot;IX&quot;</span>, <span class="number">9</span>);</span><br><span class="line">        dic.Add(<span class="string">&quot;V&quot;</span>, <span class="number">5</span>);</span><br><span class="line">        dic.Add(<span class="string">&quot;IV&quot;</span>, <span class="number">4</span>);</span><br><span class="line">        dic.Add(<span class="string">&quot;I&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> i <span class="keyword">in</span> dic)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (num &gt;= i.Value)</span><br><span class="line">            &#123;</span><br><span class="line">                sb.Append(i.Key);</span><br><span class="line">                num -= i.Value;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (num == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.ToString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣0013——罗马数字转整数</title>
    <url>/2023/11/19/%E5%8A%9B%E6%89%A30013%E2%80%94%E2%80%94%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97%E8%BD%AC%E6%95%B4%E6%95%B0/</url>
    <content><![CDATA[<h1><a href="https://leetcode.cn/problems/roman-to-integer/">罗马数字转整数</a></h1>
<p>难度：<strong>简单</strong></p>
<h2 id="题目描述">题目描述</h2>
<p>罗马数字包含以下七种字符: <code>I</code>， <code>V</code>， <code>X</code>， <code>L</code>，<code>C</code>，<code>D</code> 和 <code>M</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">字符          数值</span><br><span class="line">I             1</span><br><span class="line">V             5</span><br><span class="line">X             10</span><br><span class="line">L             50</span><br><span class="line">C             100</span><br><span class="line">D             500</span><br><span class="line">M             1000</span><br></pre></td></tr></table></figure>
<p>例如， 罗马数字 <code>2</code> 写做 <code>II</code> ，即为两个并列的 1 。<code>12</code> 写做 <code>XII</code> ，即为 <code>X</code> + <code>II</code> 。 <code>27</code> 写做  <code>XXVII</code>, 即为 <code>XX</code> + <code>V</code> + <code>II</code> 。<br>
通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 <code>IIII</code>，而是 <code>IV</code>。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 <code>IX</code>。这个特殊的规则只适用于以下六种情况：</p>
<ul>
<li><code>I</code> 可以放在 <code>V</code> (5) 和 <code>X</code> (10) 的左边，来表示 4 和 9。</li>
<li><code>X</code> 可以放在 <code>L</code> (50) 和 <code>C</code> (100) 的左边，来表示 40 和 90。</li>
<li><code>C</code> 可以放在 <code>D</code> (500) 和 <code>M</code> (1000) 的左边，来表示 400 和 900。</li>
</ul>
<p>给定一个罗马数字，将其转换成整数</p>
<h2 id="示例1">示例1</h2>
<blockquote>
<p><strong>输入</strong>：s = “III”<br>
<strong>输出</strong>：3</p>
</blockquote>
<h2 id="示例2">示例2</h2>
<blockquote>
<p><strong>输入</strong>：s = “IV”<br>
<strong>输出</strong>：4</p>
</blockquote>
<h2 id="示例3">示例3</h2>
<blockquote>
<p><strong>输入</strong>：s = “IX”<br>
<strong>输出</strong>：9</p>
</blockquote>
<h2 id="示例4">示例4</h2>
<blockquote>
<p><strong>输入</strong>：s = “LVIII”<br>
<strong>输出</strong>：58</p>
</blockquote>
<h2 id="示例5">示例5</h2>
<blockquote>
<p><strong>输入</strong>：s = “MCMXCIV”<br>
<strong>输出</strong>：1994</p>
</blockquote>
<h2 id="题解">题解</h2>
<p>将各种情况存入字典之中，对当前字符串进行遍历，如果当前字符代表的数字比后面一个字符代表的数字小，那么就直接减去当前数字，否则就加上当前数字，同时，因为要防止越界，要在循环结束之后加上最后一个元素的值</p>
<h2 id="想法代码">想法代码</h2>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Solution</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params">String[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> s = <span class="string">&quot;IV&quot;</span>;</span><br><span class="line">        Console.WriteLine(RomanToInt(s));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> <span class="title">RomanToInt</span>(<span class="params"><span class="built_in">string</span> s</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt; dic = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt; &#123; &#123;<span class="string">&quot;I&quot;</span>, <span class="number">1</span>&#125; , &#123; <span class="string">&quot;V&quot;</span>, <span class="number">5</span> &#125;, &#123; <span class="string">&quot;X&quot;</span>, <span class="number">10</span> &#125;, &#123; <span class="string">&quot;L&quot;</span>, <span class="number">50</span> &#125;, &#123; <span class="string">&quot;C&quot;</span>, <span class="number">100</span> &#125;, &#123; <span class="string">&quot;D&quot;</span>, <span class="number">500</span> &#125;, &#123; <span class="string">&quot;M&quot;</span>, <span class="number">1000</span> &#125; &#125;;</span><br><span class="line">        <span class="built_in">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; s.Length - <span class="number">1</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (dic[s[i].ToString()] &lt; dic[s[i + <span class="number">1</span>].ToString()])</span><br><span class="line">            &#123;</span><br><span class="line">                result -= dic[s[i].ToString()];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                result += dic[s[i].ToString()];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result += dic[s[s.Length - <span class="number">1</span>].ToString()];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣0014——最长公共前缀</title>
    <url>/2023/11/19/%E5%8A%9B%E6%89%A30014%E2%80%94%E2%80%94%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80/</url>
    <content><![CDATA[<h1><a href="https://leetcode.cn/problems/longest-common-prefix/">最长公共前缀</a></h1>
<p>难度：<strong>简单</strong></p>
<h2 id="题目描述">题目描述</h2>
<p>编写一个函数来查找字符串数组中的最长公共前缀。<br>
如果不存在公共前缀，返回空字符串 <code>&quot;&quot;</code>。</p>
<h2 id="示例1">示例1</h2>
<blockquote>
<p><strong>输入</strong>：strs = [“flower”,“flow”,“flight”]<br>
<strong>输出</strong>：“fl”</p>
</blockquote>
<h2 id="示例2">示例2</h2>
<blockquote>
<p><strong>输入</strong>：strs = [“dog”,“racecar”,“car”]<br>
<strong>输出</strong>：&quot;&quot;</p>
</blockquote>
<h2 id="题解">题解</h2>
<p>对第一个字符串进行遍历，作为第一层遍历，之后对每一个字符串对应的位置进行对比作为第二层遍历，如果不相同直接返回，如果相同则将当前字符加入结果中并继续循环</p>
<h2 id="想法代码">想法代码</h2>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Solution</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params">String[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span>[] strs = &#123; <span class="string">&quot;flower&quot;</span>, <span class="string">&quot;flow&quot;</span>, <span class="string">&quot;flight&quot;</span> &#125;;</span><br><span class="line">        Console.WriteLine(LongestCommonPrefix(strs));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">LongestCommonPrefix</span>(<span class="params"><span class="built_in">string</span>[] strs</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> count = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; strs[<span class="number">0</span>].Length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">1</span>; j &lt; strs.Length; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (i &gt; (strs[j].Length - <span class="number">1</span>) || strs[j][i] != strs[<span class="number">0</span>][i])</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> count;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            count += strs[<span class="number">0</span>][i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣0015——三数之和</title>
    <url>/2023/11/19/%E5%8A%9B%E6%89%A30015%E2%80%94%E2%80%94%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
    <content><![CDATA[<h1><a href="https://leetcode.cn/problems/3sum/">三数之和</a></h1>
<p>难度：<strong>中等</strong></p>
<h2 id="题目描述">题目描述</h2>
<p>给你一个整数数组 <code>nums</code> ，判断是否存在三元组 <code>[nums[i], nums[j], nums[k]]</code> 满足 <code>i != j</code>、<code>i != k</code> 且 <code>j != k</code> ，同时还满足 <code>nums[i] + nums[j] + nums[k] == 0</code> 。请<br>
你返回所有和为 <code>0</code> 且不重复的三元组。<br>
<strong>注意</strong>：答案中不可以包含重复的三元组。</p>
<h2 id="示例1">示例1</h2>
<blockquote>
<p><strong>输入</strong>：nums = [-1,0,1,2,-1,-4]<br>
<strong>输出</strong>：[[-1,-1,2],[-1,0,1]]</p>
</blockquote>
<h2 id="示例2">示例2</h2>
<blockquote>
<p><strong>输入</strong>：nums = [0,1,1]<br>
<strong>输出</strong>：[]</p>
</blockquote>
<h2 id="示例3">示例3</h2>
<blockquote>
<p><strong>输入</strong>：nums = [0,0,0]<br>
<strong>输出</strong>：[[0,0,0]]</p>
</blockquote>
<h2 id="题解">题解</h2>
<p>先排序，从数组第一个元素开始遍历，遍历到倒数第三个元素，定义一个左指针和一个右指针，左指针为第一层循环值 + 1，右指针为最后一个元素下标，定义三数之和为当前循环数组元素，左指针下标代表元素，右指针代表元素，当左指针小于右指针时，如果和为零，那么就将结果添加到列表中，如果和小于零，左指针自增，如果大于零，右指针自减。</p>
<h2 id="想法代码">想法代码</h2>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Solution</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params">String[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span>[] nums = &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line">        IList&lt;IList&lt;<span class="built_in">int</span>&gt;&gt; list = ThreeSum(nums);</span><br><span class="line">        <span class="keyword">foreach</span> (IList&lt;<span class="built_in">int</span>&gt; i <span class="keyword">in</span> list)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.Write(<span class="string">@&quot;[&quot;</span>);</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="built_in">int</span> j <span class="keyword">in</span> i)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.Write(j + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.Write(<span class="string">@&quot;]&quot;</span>);</span><br><span class="line">            Console.WriteLine();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> IList&lt;IList&lt;<span class="built_in">int</span>&gt;&gt; ThreeSum(<span class="built_in">int</span>[] nums)</span><br><span class="line">    &#123;</span><br><span class="line">        IList&lt;IList&lt;<span class="built_in">int</span>&gt;&gt; result = <span class="keyword">new</span> List&lt;IList&lt;<span class="built_in">int</span>&gt;&gt;();</span><br><span class="line">        <span class="built_in">int</span> len = nums.Length;</span><br><span class="line">        <span class="keyword">if</span> (len &lt; <span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        Array.Sort(nums);</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; len - <span class="number">2</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">int</span> left = i + <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">int</span> right = len - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (left &lt; right)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">int</span> sum = nums[i] + nums[left] + nums[right];</span><br><span class="line">                <span class="keyword">if</span> (sum == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    result.Add(<span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;() &#123; nums[i], nums[left], nums[right] &#125;);</span><br><span class="line">                    <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[left] == nums[left + <span class="number">1</span>])</span><br><span class="line">                    &#123;</span><br><span class="line">                        left++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[right] == nums[right - <span class="number">1</span>])</span><br><span class="line">                    &#123;</span><br><span class="line">                        right--;</span><br><span class="line">                    &#125;</span><br><span class="line">                    left++;</span><br><span class="line">                    right--;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; <span class="number">0</span>) left++;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (sum &gt; <span class="number">0</span>) right--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣0016——最接近的三数之和</title>
    <url>/2023/11/19/%E5%8A%9B%E6%89%A30016%E2%80%94%E2%80%94%E6%9C%80%E6%8E%A5%E8%BF%91%E7%9A%84%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
    <content><![CDATA[<h1><a href="https://leetcode.cn/problems/3sum-closest/">最接近的三数之和</a></h1>
<p>难度：<strong>中等</strong></p>
<h2 id="题目要求">题目要求</h2>
<p>给你一个长度为 <code>n</code> 的整数数组 <code>nums</code> 和 一个目标值 <code>target</code>。请你从 <code>nums</code> 中选出三个整数，使它们的和与 <code>target</code> 最接近。<br>
返回这三个数的和。<br>
假定每组输入只存在恰好一个解。</p>
<h2 id="示例1">示例1</h2>
<blockquote>
<p><strong>输入</strong>：nums = [-1,2,1,-4], target = 1<br>
<strong>输出</strong>：2</p>
</blockquote>
<h2 id="示例2">示例2</h2>
<blockquote>
<p><strong>输入</strong>：nums = [0,0,0], target = 1<br>
<strong>输出</strong>：0</p>
</blockquote>
<h2 id="题解：">题解：</h2>
<p>先对数组进行排序，从数组第一个元素开始遍历，遍历到倒数第三个元素，定义一个左指针和一个右指针，左指针为第一层循环值 + 1，右指针为最后一个元素下标，定义三数之和为当前循环数组元素，左指针下标代表元素，右指针代表元素，当左指针小于右指针时，如果和与目标值相等，直接返回目标值，如果比目标值大，右指针自减，如果比目标值小，左指针自增</p>
<h2 id="想法代码">想法代码</h2>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Solution</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params">String[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span>[] nums = &#123; <span class="number">-1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">-4</span> &#125;;</span><br><span class="line">        <span class="built_in">int</span> target = <span class="number">1</span>;</span><br><span class="line">        Console.WriteLine(ThreeSumClosest(nums,target));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> <span class="title">ThreeSumClosest</span>(<span class="params"><span class="built_in">int</span>[] nums, <span class="built_in">int</span> target</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Array.Sort(nums);</span><br><span class="line">        <span class="built_in">int</span> res = <span class="built_in">int</span>.MaxValue;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; nums.Length - <span class="number">2</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> left = i + <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">int</span> right = nums.Length - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (left &lt; right)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">int</span> sum = nums[left] + nums[right] + nums[i];</span><br><span class="line">                <span class="keyword">if</span> (sum == target)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> target;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (sum &gt; target)</span><br><span class="line">                &#123;</span><br><span class="line">                    right--;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    left++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (Math.Abs(sum - target) &lt; Math.Abs(res - target))</span><br><span class="line">                &#123;</span><br><span class="line">                    res = sum;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣0017——电话号码的字母组合</title>
    <url>/2023/11/19/%E5%8A%9B%E6%89%A30017%E2%80%94%E2%80%94%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%E7%9A%84%E5%AD%97%E6%AF%8D%E7%BB%84%E5%90%88/</url>
    <content><![CDATA[<h1><a href="https://leetcode.cn/problems/letter-combinations-of-a-phone-number/">电话号码的字母组合</a></h1>
<p>难度：<strong>中等</strong></p>
<h2 id="题目描述">题目描述</h2>
<p>给定一个仅包含数字 <code>2-9</code> 的字符串，返回所有它能表示的字母组合。答案可以按 <strong>任意顺序</strong> 返回。<br>
给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。</p>
<p><img src="/images/ltc_0017_1.png" alt="示例"></p>
<h2 id="示例1">示例1</h2>
<blockquote>
<p><strong>输入</strong>：digits = “23”<br>
<strong>输出</strong>：[“ad”,“ae”,“af”,“bd”,“be”,“bf”,“cd”,“ce”,“cf”]</p>
</blockquote>
<h2 id="示例2">示例2</h2>
<blockquote>
<p><strong>输入</strong>：digits = “”<br>
<strong>输出</strong>：[]</p>
</blockquote>
<h2 id="示例3">示例3</h2>
<blockquote>
<p><strong>输入</strong>：digits = “2”<br>
<strong>输出</strong>：[“a”,“b”,“c”]</p>
</blockquote>
<h2 id="题解">题解</h2>
<p>利用回溯法，将每一个数字字符对应的字符串添加到字典当中，之后设定回溯，定义一个空的字符串，定义一个中间元素Temp使其与每一次回溯的字典中索引的值相同，如果字符串的长度和给定的字符长度相同，将字符串加入到一个List中并直接return，如果不满足，进行循环，每一次让空字符串加上temp的一个字符，然后进行回溯，退出回溯之后去除字符串中的最后一个元素</p>
<h2 id="想法代码">想法代码</h2>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Solution</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params">String[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> digits = <span class="string">&quot;23&quot;</span>;</span><br><span class="line">        IList&lt;<span class="built_in">string</span>&gt; list = LetterCombinations(digits);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="built_in">string</span> s <span class="keyword">in</span> list)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IList&lt;<span class="built_in">string</span>&gt; <span class="title">LetterCombinations</span>(<span class="params"><span class="built_in">string</span> digits</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        List&lt;<span class="built_in">string</span>&gt; list = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">        <span class="keyword">if</span> (digits.Length == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> list;</span><br><span class="line">        &#125;</span><br><span class="line">        Dictionary&lt;<span class="built_in">char</span>,<span class="built_in">string</span>&gt; dic = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">char</span>,<span class="built_in">string</span>&gt;();</span><br><span class="line">        dic.Add(<span class="string">&#x27;2&#x27;</span>, <span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        dic.Add(<span class="string">&#x27;3&#x27;</span>, <span class="string">&quot;def&quot;</span>);</span><br><span class="line">        dic.Add(<span class="string">&#x27;4&#x27;</span>, <span class="string">&quot;ghi&quot;</span>);</span><br><span class="line">        dic.Add(<span class="string">&#x27;5&#x27;</span>, <span class="string">&quot;jkl&quot;</span>);</span><br><span class="line">        dic.Add(<span class="string">&#x27;6&#x27;</span>, <span class="string">&quot;mno&quot;</span>);</span><br><span class="line">        dic.Add(<span class="string">&#x27;7&#x27;</span>, <span class="string">&quot;pqrs&quot;</span>);</span><br><span class="line">        dic.Add(<span class="string">&#x27;8&#x27;</span>, <span class="string">&quot;tuv&quot;</span>);</span><br><span class="line">        dic.Add(<span class="string">&#x27;9&#x27;</span>, <span class="string">&quot;wxyz&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Recall(<span class="number">0</span>,<span class="string">&quot;&quot;</span>,digits,dic,list);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Recall</span>(<span class="params"><span class="built_in">int</span> index, <span class="built_in">string</span> str, <span class="built_in">string</span> digits, Dictionary&lt;<span class="built_in">char</span>, <span class="built_in">string</span>&gt; dic, List&lt;<span class="built_in">string</span>&gt; list</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (str.Length == digits.Length)</span><br><span class="line">        &#123;</span><br><span class="line">            list.Add(str);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">string</span> temp = dic[digits[index]];</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; temp.Length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            str += temp[i];</span><br><span class="line">            Recall(index + <span class="number">1</span>, str, digits, dic, list);</span><br><span class="line">            str = str.Remove(str.Length - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣0018——四数之和</title>
    <url>/2023/11/19/%E5%8A%9B%E6%89%A30018%E2%80%94%E2%80%94%E5%9B%9B%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
    <content><![CDATA[<h1><a href="https://leetcode.cn/problems/4sum/">四数之和</a></h1>
<p>难度：<strong>中等</strong></p>
<h2 id="题目描述">题目描述</h2>
<p>给你一个由 <code>n</code> 个整数组成的数组 <code>nums</code> ，和一个目标值 <code>target</code> 。请你找出并返回满足下述全部条件且<strong>不重复</strong>的四元组 <code>[nums[a], nums[b], nums[c], nums[d]]</code> （若两个四元组元素一一对应，则认为两个四元组重复）：</p>
<ul>
<li><code>0 &lt;= a, b, c, d&amp;nbsp;&lt; n</code></li>
<li><code>a</code>、<code>b</code>、<code>c</code> 和 <code>d</code> <strong>互不相同</strong></li>
<li><code>nums[a] + nums[b] + nums[c] + nums[d] == target</code></li>
</ul>
<p>你可以按 <strong>任意顺序</strong> 返回答案 。</p>
<h2 id="示例1">示例1</h2>
<blockquote>
<p><strong>输入</strong>：nums = [1,0,-1,0,-2,2], target = 0<br>
<strong>输出</strong>：[[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]</p>
</blockquote>
<h2 id="示例2">示例2</h2>
<blockquote>
<p><strong>输入</strong>：nums = [2,2,2,2,2], target = 8<br>
<strong>输出</strong>：[[2,2,2,2]]</p>
</blockquote>
<h2 id="题解">题解</h2>
<p>根据三数之和演变而来，可以在三数之和外面再次嵌套一个循环，内部的基本逻辑不变，依然是左右两个指针进行移动</p>
<h2 id="想法代码">想法代码</h2>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span>[] nums = &#123; <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">-2</span>, <span class="number">2</span> &#125;;</span><br><span class="line">        <span class="built_in">int</span> target = <span class="number">0</span>;</span><br><span class="line">        IList&lt;IList&lt;<span class="built_in">int</span>&gt;&gt; list = FourSum(nums, target);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> x <span class="keyword">in</span> list)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> y <span class="keyword">in</span> x)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.Write(y + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.WriteLine();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> IList&lt;IList&lt;<span class="built_in">int</span>&gt;&gt; FourSum(<span class="built_in">int</span>[] nums, <span class="built_in">int</span> target)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        IList&lt;IList&lt;<span class="built_in">int</span>&gt;&gt; res = <span class="keyword">new</span> List&lt;IList&lt;<span class="built_in">int</span>&gt;&gt;();</span><br><span class="line"></span><br><span class="line">        Array.Sort(nums);</span><br><span class="line">        <span class="built_in">int</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt;= nums.Length - <span class="number">4</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> j = i + <span class="number">1</span>; j &lt;= nums.Length - <span class="number">4</span> + <span class="number">1</span>; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (j &gt; i + <span class="number">1</span> &amp;&amp; nums[j] == nums[j - <span class="number">1</span>])</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="built_in">int</span> left = j + <span class="number">1</span>;</span><br><span class="line">                <span class="built_in">int</span> right = nums.Length - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span> (left &lt; right)</span><br><span class="line">                &#123;</span><br><span class="line">                    sum = nums[i] + nums[j] + nums[left] + nums[right];</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (nums[i] &gt; <span class="number">0</span> &amp;&amp; nums[j] &gt; <span class="number">0</span> &amp;&amp; nums[left] &gt; <span class="number">0</span> &amp;&amp; nums[right] &gt; <span class="number">0</span> &amp;&amp; sum &lt; <span class="number">0</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">return</span> res;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (sum &lt; target)</span><br><span class="line">                    &#123;</span><br><span class="line">                        left++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (sum &gt; target)</span><br><span class="line">                    &#123;</span><br><span class="line">                        right--;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line"></span><br><span class="line">                        res.Add(<span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;() &#123; nums[i], nums[j], nums[left], nums[right] &#125;);</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[left] == nums[left + <span class="number">1</span>])</span><br><span class="line">                        &#123;</span><br><span class="line">                            left++;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[right] == nums[right - <span class="number">1</span>])</span><br><span class="line">                        &#123;</span><br><span class="line">                            right--;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        left++;</span><br><span class="line">                        right--;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣0019——删除链表的倒数第N个结点</title>
    <url>/2023/11/19/%E5%8A%9B%E6%89%A30019%E2%80%94%E2%80%94%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E7%BB%93%E7%82%B9/</url>
    <content><![CDATA[<h1><a href="https://leetcode.cn/problems/remove-nth-node-from-end-of-list/">删除链表的倒数第N个结点</a></h1>
<p>难度：<strong>中等</strong></p>
<h2 id="题目描述">题目描述</h2>
<p>给你一个链表，删除链表的倒数第 <code>n</code> 个结点，并且返回链表的头结点。</p>
<h2 id="示例1">示例1</h2>
<p><img src="/images/ltc0019_1.jpg" alt="示例图片"></p>
<blockquote>
<p><strong>输入</strong>：head = [1,2,3,4,5], n = 2<br>
<strong>输出</strong>：[1,2,3,5]</p>
</blockquote>
<h2 id="示例2">示例2</h2>
<blockquote>
<p><strong>输入</strong>：head = [1], n = 1<br>
<strong>输出</strong>：[]</p>
</blockquote>
<h2 id="示例3">示例3</h2>
<blockquote>
<p><strong>输入</strong>：head = [1,2], n = 1<br>
<strong>输出</strong>：[1]</p>
</blockquote>
<h2 id="题解">题解</h2>
<p>采用快慢指针，让快指针先走<code>n</code>步，然后快慢指针一起走，直到快指针为空，那么这个时候慢指针对应的元素就是要删除的元素</p>
<h2 id="想法代码">想法代码</h2>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ListNode</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> val;</span><br><span class="line">    <span class="keyword">public</span> ListNode next;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ListNode</span>(<span class="params"><span class="built_in">int</span> val = <span class="number">0</span>, ListNode next = <span class="literal">null</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.val = val; </span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        ListNode list = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">        list.next = <span class="keyword">new</span> ListNode(<span class="number">2</span>);</span><br><span class="line">        list.next.next = <span class="keyword">new</span> ListNode(<span class="number">3</span>);</span><br><span class="line">        ListNode list2 = RemoveNthFromEnd(list, <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(list2.val);</span><br><span class="line">            list2 = list2.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title">RemoveNthFromEnd</span>(<span class="params">ListNode head, <span class="built_in">int</span> n</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (head.next == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            head = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ListNode fast = head;</span><br><span class="line">        ListNode slow = head;</span><br><span class="line">        ListNode temp = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (fast != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (n &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                fast = fast.next;</span><br><span class="line">                n--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                temp = slow;</span><br><span class="line">                slow = slow.next;</span><br><span class="line">                fast = fast.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (temp == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            head = slow.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            temp.next = slow.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣0020——有效的括号</title>
    <url>/2023/11/19/%E5%8A%9B%E6%89%A30020%E2%80%94%E2%80%94%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/</url>
    <content><![CDATA[<h1><a href="https://leetcode.cn/problems/valid-parentheses/">有效的括号</a></h1>
<p>难度：<strong>简单</strong></p>
<h2 id="题目描述">题目描述</h2>
<p>给定一个只包括 <code>'('</code>，<code>')'</code>，<code>'&#123;'</code>，<code>'&#125;'</code>，<code>'['</code>，<code>']'</code> 的字符串 <code>s</code> ，判断字符串是否有效。<br>
有效字符串需满足：</p>
<ol>
<li>左括号必须用相同类型的右括号闭合。</li>
<li>左括号必须以正确的顺序闭合。</li>
<li>每个右括号都有一个对应的相同类型的左括号。</li>
</ol>
<h2 id="示例1">示例1</h2>
<blockquote>
<p><strong>输入</strong>：s = “()”<br>
<strong>输出</strong>：true</p>
</blockquote>
<h2 id="示例2">示例2</h2>
<blockquote>
<p><strong>输入</strong>：s = “()[]{}”<br>
<strong>输出</strong>：true</p>
</blockquote>
<h2 id="示例3">示例3</h2>
<blockquote>
<p><strong>输入</strong>：s = “(]”<br>
<strong>输出</strong>：false</p>
</blockquote>
<h2 id="题解">题解</h2>
<p>利用栈可以轻松的做出这道题，当遍历到左括号的时候，入栈相对应的右括号，当遍历到右括号的时候，如果栈内没有元素或者出栈的元素不是对应的右括号，直接返回false；如果最后栈内仍有元素，那么也返回false</p>
<h2 id="想法代码">想法代码</h2>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Solution</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params">String[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> s = Console.ReadLine();</span><br><span class="line">        Console.WriteLine(IsValid(s));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">IsValid</span>(<span class="params"><span class="built_in">string</span> s</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> len = s.Length;</span><br><span class="line">        <span class="keyword">if</span> (len % <span class="number">2</span> != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> stack = <span class="keyword">new</span> Stack&lt;<span class="built_in">char</span>&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] == <span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                stack.Push(<span class="string">&#x27;)&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (s[i] == <span class="string">&#x27;[&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                stack.Push(<span class="string">&#x27;]&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (s[i] == <span class="string">&#x27;&#123;&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                stack.Push(<span class="string">&#x27;&#125;&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (stack.Count == <span class="number">0</span> || stack.Pop() != s[i])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (stack.Count &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
</search>
