<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>力扣0001——两数之和</title>
    <url>/2023/11/18/%E5%8A%9B%E6%89%A30001%E2%80%94%E2%80%94%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
    <content><![CDATA[<h1><a href="https://leetcode.cn/problems/two-sum/">两数之和</a></h1>
<p>难度：<strong>简单</strong></p>
<h2 id="题目描述">题目描述</h2>
<p>给定一个整数数组 <code>nums</code> 和一个整数目标值 <code>target</code>，请你在该数组中找出 <strong>和为目标值</strong><code>target</code>的那 <strong>两个</strong> 整数，并返回它们的数组下标。<br>
你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。<br>
你可以按任意顺序返回答案。</p>
<h2 id="示例1">示例1</h2>
<blockquote>
<p><strong>输入</strong>：nums = [2,7,11,15], target = 9<br>
<strong>输出</strong>：[0,1]</p>
</blockquote>
<h2 id="示例2">示例2</h2>
<blockquote>
<p>输入：nums = [3,2,4]，target = 6<br>
输出：[1,2]</p>
</blockquote>
<h2 id="示例3">示例3</h2>
<blockquote>
<p>输入：nums = [3,3]，target = 6<br>
输出：[0,1]</p>
</blockquote>
<h2 id="题解">题解</h2>
<p>直接遍历数组，获取所有的和，找出符合条件的两个数的下标然后直接输出</p>
<h2 id="想法代码">想法代码</h2>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Solution</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params">String[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span>[] nums = &#123; <span class="number">2</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">15</span> &#125;;</span><br><span class="line">        <span class="built_in">int</span> target = <span class="number">9</span>;</span><br><span class="line">        Solution solution = <span class="keyword">new</span> Solution();</span><br><span class="line">        <span class="built_in">int</span>[] ints = solution.TwoSum(nums, target);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="built_in">int</span> x <span class="keyword">in</span> ints)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span>[] <span class="title">TwoSum</span>(<span class="params"><span class="built_in">int</span>[] nums, <span class="built_in">int</span> target</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; nums.Length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> j = i + <span class="number">1</span>; j &lt; nums.Length; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[i] + nums[j] == target)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">int</span>[] &#123; i, j &#125;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> System.Exception(<span class="string">&quot;Failure&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣0002——两数相加</title>
    <url>/2023/11/18/%E5%8A%9B%E6%89%A30002%E2%80%94%E2%80%94%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/</url>
    <content><![CDATA[<h1><a href="https://leetcode.cn/problems/add-two-numbers/">两数相加</a></h1>
<p>难度：<strong>中等</strong></p>
<h2 id="题目描述">题目描述</h2>
<p>给你两个 <strong>非空</strong> 的链表，表示两个非负的整数。它们每位数字都是按照 <strong>逆序</strong> 的方式存储的，并且每个节点只能存储 <strong>一位</strong> 数字。<br>
请你将两个数相加，并以相同形式返回一个表示和的链表。<br>
你可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p>
<h2 id="示例1">示例1</h2>
<p><img src="/images/ltc0002_1.jpg" alt="图片示例"></p>
<blockquote>
<p><strong>输入</strong>：l1 = [2,4,3], l2 = [5,6,4]<br>
<strong>输出</strong>：[7,0,8]</p>
</blockquote>
<h2 id="示例2">示例2</h2>
<blockquote>
<p><strong>输入</strong>：l1 = [0], l2 = [0]<br>
<strong>输出</strong>：[0]</p>
</blockquote>
<h2 id="示例3">示例3</h2>
<blockquote>
<p><strong>输入</strong>：l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]<br>
<strong>输出</strong>：[8,9,9,9,0,0,0,1]</p>
</blockquote>
<h2 id="题解">题解</h2>
<p>因为两个链表中的数都是逆序排列的，所以两个链表中的数字可以直接相加，如果两个链表的长度不同，则可以认为长度短的链表的后面跟了若干个 0<br>
逐位求和并与当前的进位值相加</p>
<h2 id="想法代码">想法代码</h2>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ListNode</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> val;</span><br><span class="line">    <span class="keyword">public</span> ListNode next;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ListNode</span>(<span class="params"><span class="built_in">int</span> val = <span class="number">0</span>, ListNode next = <span class="literal">null</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.val = val; </span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Solution</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        ListNode l1 = <span class="keyword">new</span> ListNode(<span class="number">2</span>);</span><br><span class="line">        l1.next = <span class="keyword">new</span> ListNode(<span class="number">4</span>);</span><br><span class="line">        l1.next.next = <span class="keyword">new</span> ListNode(<span class="number">3</span>);</span><br><span class="line">        ListNode l2 = <span class="keyword">new</span> ListNode(<span class="number">5</span>);</span><br><span class="line">        l2.next = <span class="keyword">new</span> ListNode(<span class="number">6</span>);</span><br><span class="line">        l2.next.next = <span class="keyword">new</span> ListNode(<span class="number">4</span>);</span><br><span class="line">        ListNode l3 = <span class="keyword">new</span> ListNode();</span><br><span class="line">        l3 = AddTwoNumbers(l1, l2);</span><br><span class="line">        ListNode tail = l3;</span><br><span class="line">        <span class="keyword">while</span> (tail != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(tail.val);</span><br><span class="line">            tail = tail.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title">AddTwoNumbers</span>(<span class="params">ListNode l1, ListNode l2</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        ListNode head = <span class="literal">null</span>, tail = <span class="literal">null</span>;</span><br><span class="line">        <span class="built_in">int</span> carry = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (l1 != <span class="literal">null</span> || l2 != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> n1 = l1 != <span class="literal">null</span> ? l1.val : <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">int</span> n2 = l2 != <span class="literal">null</span> ? l2.val : <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">int</span> sum = n1 + n2 + carry;</span><br><span class="line">            <span class="keyword">if</span> (head == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                head = tail = <span class="keyword">new</span> ListNode(sum % <span class="number">10</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                tail.next = <span class="keyword">new</span> ListNode(sum % <span class="number">10</span>);</span><br><span class="line">                tail = tail.next;</span><br><span class="line">            &#125;</span><br><span class="line">            carry = sum / <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span> (l1 != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                l1 = l1.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (l2 != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                l2 = l2.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (carry &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            tail.next = <span class="keyword">new</span> ListNode(carry);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣0003——无重复字符的最长字串</title>
    <url>/2023/11/18/%E5%8A%9B%E6%89%A30003%E2%80%94%E2%80%94%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%97%E4%B8%B2/</url>
    <content><![CDATA[<h1><a href="https://leetcode.cn/problems/longest-substring-without-repeating-characters/">无重复字符的最长子串</a></h1>
<p>难度：<strong>中等</strong></p>
<h2 id="题目描述">题目描述</h2>
<p>给定一个字符串 <code>s</code> ，请你找出其中不含有重复字符的 <strong>最长子串</strong> 的长度。</p>
<h2 id="示例1">示例1</h2>
<blockquote>
<p><strong>输入</strong>：s = “abcabcbb”<br>
<strong>输出</strong>：3</p>
</blockquote>
<h2 id="示例2">示例2</h2>
<blockquote>
<p><strong>输入</strong>：s = “bbbbb”<br>
<strong>输出</strong>：1</p>
</blockquote>
<h2 id="示例3">示例3</h2>
<blockquote>
<p><strong>输入</strong>：s = “pwwkew”<br>
<strong>输出</strong>：3</p>
</blockquote>
<h2 id="题解">题解</h2>
<p>定义哈希集合，记录每一个字符是否出现过，然后根据两个指针<code>left</code>，<code>right</code>的移动来对整个字符串来进行窗口移动</p>
<h2 id="想法代码">想法代码</h2>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Solution</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params">String[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> s = <span class="string">&quot;pwwkew&quot;</span>;</span><br><span class="line">        <span class="built_in">int</span> max = LengthOfLongestSubstring(s);</span><br><span class="line">        Console.WriteLine(max);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> <span class="title">LengthOfLongestSubstring</span>(<span class="params"><span class="built_in">string</span> s</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        HashSet&lt;<span class="built_in">char</span>&gt; letter = <span class="keyword">new</span> HashSet&lt;<span class="built_in">char</span>&gt;();</span><br><span class="line">        <span class="built_in">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">int</span> length = s.Length;</span><br><span class="line">        <span class="built_in">int</span> count = <span class="number">0</span>, max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (right &lt; length)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!letter.Contains(s[right]))</span><br><span class="line">            &#123;</span><br><span class="line">                letter.Add(s[right]);</span><br><span class="line">                right++;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                letter.Remove(s[left]);</span><br><span class="line">                left++;</span><br><span class="line">                count--;</span><br><span class="line">            &#125;</span><br><span class="line">            max = Math.Max(max, count);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣0004——寻找两个正序数组的中位数</title>
    <url>/2023/11/18/%E5%8A%9B%E6%89%A30004%E2%80%94%E2%80%94%E5%AF%BB%E6%89%BE%E4%B8%A4%E4%B8%AA%E6%AD%A3%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0/</url>
    <content><![CDATA[<h1><a href="https://leetcode.cn/problems/median-of-two-sorted-arrays/">寻找两个正序数组的中位数</a>难度：<strong>困难</strong></h1>
<h2 id="题目描述">题目描述</h2>
<p>给定两个大小分别为 <code>m</code> 和 <code>n</code> 的正序（从小到大）数组 <code>nums1</code> 和 <code>nums2</code>。请你找出并返回这两个正序数组的 <strong>中位数</strong> 。<br>
算法的时间复杂度应该为 <code>O(log (m+n))</code> 。</p>
<h2 id="示例1">示例1</h2>
<blockquote>
<p><strong>输入</strong>：nums1 = [1,3], nums2 = [2]<br>
<strong>输出</strong>：2.00000</p>
</blockquote>
<h2 id="示例2">示例2</h2>
<blockquote>
<p><strong>输入</strong>：nums1 = [1,2], nums2 = [3,4]<br>
<strong>输入</strong>：2.50000</p>
</blockquote>
<h2 id="题解">题解</h2>
<p>将两个数组合并到一个<code>List</code>表中，通过<code>Sort</code>来对它进行排序，并获得两个数组的长度的和<code>len</code>，如果和为奇数就可以直接返回<code>List</code>中的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi><mi>e</mi><mi>n</mi><mi mathvariant="normal">/</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">len / 2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord">/</span><span class="mord">2</span></span></span></span> 的值，如果为偶数，就返回<code>List</code>中 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi><mi>e</mi><mi>n</mi><mi mathvariant="normal">/</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">len / 2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord">/</span><span class="mord">2</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi><mi>e</mi><mi>n</mi><mi mathvariant="normal">/</mi><mn>2</mn><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">len / 2 + 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord">/</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 的和的平均值</p>
<h2 id="想法代码">想法代码</h2>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span>[] nums1 = &#123; <span class="number">1</span>, <span class="number">2</span> &#125;;</span><br><span class="line">        <span class="built_in">int</span>[] nums2 = &#123; <span class="number">3</span>, <span class="number">4</span> &#125;;</span><br><span class="line">        Console.WriteLine(FindMedianSortedArrays(nums1,nums2));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">double</span> <span class="title">FindMedianSortedArrays</span>(<span class="params"><span class="built_in">int</span>[] nums1, <span class="built_in">int</span>[] nums2</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> m = nums1.Length;</span><br><span class="line">        <span class="built_in">int</span> n = nums2.Length;</span><br><span class="line">        <span class="built_in">int</span> len = m + n;</span><br><span class="line">        <span class="keyword">var</span> resultIndex = len / <span class="number">2</span>;</span><br><span class="line">        List&lt;<span class="built_in">int</span>&gt; list = <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;(nums1);</span><br><span class="line">        list.AddRange(nums2);</span><br><span class="line">        list.Sort();</span><br><span class="line">        <span class="keyword">if</span> (len % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> (list[resultIndex - <span class="number">1</span>] + list[resultIndex]) / <span class="number">2.0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> list[resultIndex];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣0005——最长回文子串</title>
    <url>/2023/11/18/%E5%8A%9B%E6%89%A30005%E2%80%94%E2%80%94%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/</url>
    <content><![CDATA[<h1><a href="https://leetcode.cn/problems/longest-palindromic-substring/">最长回文子串</a></h1>
<p>难度：<strong>中等</strong></p>
<h2 id="题目描述">题目描述</h2>
<p>给你一个字符串 <code>s</code>，找到 <code>s</code> 中最长的回文子串。<br>
如果字符串的反序与原始字符串相同，则该字符串称为回文字符串。</p>
<h2 id="示例1">示例1</h2>
<blockquote>
<p><strong>输入</strong>：s = “babad”<br>
<strong>输出</strong>：“bab”</p>
</blockquote>
<h2 id="示例2">示例2</h2>
<blockquote>
<p><strong>输入</strong>：s = “cbbd”<br>
<strong>输出</strong>：“bb”</p>
</blockquote>
<h2 id="题解">题解</h2>
<p>滑动窗口法，遍历每一个字符，每次遍历用<code>left</code>和<code>right</code>来记录当前窗口然后向右滑动知道超出数组或者和下标数不相等就停止，最后向两边滑动窗口判断回文，直到不相等或超过边界。记录最长的子串</p>
<h2 id="想法代码">想法代码</h2>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Solution</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params">String[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> s = <span class="string">&quot;babad&quot;</span>;</span><br><span class="line">        Console.WriteLine(LongestPaildrome(s));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">LongestPaildrome</span>(<span class="params"><span class="built_in">string</span> s</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> left;</span><br><span class="line">        <span class="built_in">int</span> right;</span><br><span class="line">        <span class="built_in">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">int</span> count;</span><br><span class="line">        <span class="built_in">int</span> max = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">int</span> resultleft = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (index &lt; s.Length)</span><br><span class="line">        &#123;</span><br><span class="line">            right = left = index;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                right++;</span><br><span class="line">                <span class="keyword">if</span> (right &gt;= s.Length || s[right] != s[left])</span><br><span class="line">                &#123;</span><br><span class="line">                    right--;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                right++;</span><br><span class="line">                left--;</span><br><span class="line">                <span class="keyword">if</span> (left &lt; <span class="number">0</span> || right &gt;= s.Length || s[left] != s[right])</span><br><span class="line">                &#123;</span><br><span class="line">                    left++;</span><br><span class="line">                    right--;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            count = right - left + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (max &lt; count)</span><br><span class="line">            &#123;</span><br><span class="line">                max = count;</span><br><span class="line">                resultleft = left;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s.Substring(resultleft, max);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣0006——N字形变换</title>
    <url>/2023/11/18/%E5%8A%9B%E6%89%A30006%E2%80%94%E2%80%94N%E5%AD%97%E5%BD%A2%E5%8F%98%E6%8D%A2/</url>
    <content><![CDATA[<h1><a href="https://leetcode.cn/problems/zigzag-conversion/">N字形变换</a></h1>
<p>难度：<strong>中等</strong></p>
<h2 id="题目描述">题目描述</h2>
<p>将一个给定字符串 <code>s</code> 根据给定的行数 <code>numRows</code> ，以从上往下、从左到右进行 Z 字形排列。<br>
比如输入字符串为 <code>&quot;PAYPALISHIRING&quot;</code> 行数为 <code>3</code> 时，排列如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">P   A   H   N</span><br><span class="line">A P L S I I G</span><br><span class="line">Y   I   R</span><br></pre></td></tr></table></figure>
<p>之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如：<code>&quot;PAHNAPLSIIGYIR&quot;</code>。<br>
请你实现这个将字符串进行指定行数变换的函数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">string convert(string s, int numRows);</span><br></pre></td></tr></table></figure>
<h2 id="示例1">示例1</h2>
<blockquote>
<p><strong>输入</strong>：s = “PAYPALISHIRING”, numRows = 3<br>
<strong>输出</strong>：“PAHNAPLSIIGYIR”</p>
</blockquote>
<h2 id="示例2">示例2</h2>
<blockquote>
<p><strong>输入</strong>：s = “PAYPALISHIRING”, numRows = 4<br>
<strong>输出</strong>：“PINALSIGYAHRPI”</p>
</blockquote>
<h2 id="示例3">示例3</h2>
<blockquote>
<p><strong>输入</strong>：s = “A”, numRows = 1<br>
<strong>输出</strong>：“A”</p>
</blockquote>
<h2 id="题解">题解</h2>
<p>对每一个字符进行标记，将所得的字符所对应的行数记录到一个数组中，创建一个字典，对每一行存储的字符串进行拼接，之后输出</p>
<h2 id="想法代码">想法代码</h2>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Solution</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params">String[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> s = <span class="string">&quot;PAYPALISHIRING&quot;</span>;</span><br><span class="line">        Console.WriteLine(Convert(s,<span class="number">3</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">Convert</span>(<span class="params"><span class="built_in">string</span> s, <span class="built_in">int</span> numRows</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> len = s.Length;</span><br><span class="line">        <span class="built_in">int</span>[] row = <span class="keyword">new</span> <span class="built_in">int</span>[len];</span><br><span class="line">        <span class="built_in">int</span> k = <span class="number">1</span>, f = <span class="number">1</span>, cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (cnt &lt; len)</span><br><span class="line">        &#123;</span><br><span class="line">            row[cnt++] = k;</span><br><span class="line">            k += f;</span><br><span class="line">            <span class="keyword">if</span> (k == <span class="number">1</span> || k == numRows) f *= <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Dictionary&lt;<span class="built_in">int</span>, StringBuilder&gt; map = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">int</span>, StringBuilder&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!map.ContainsKey(row[i]))</span><br><span class="line">            &#123;</span><br><span class="line">                map.Add(row[i], <span class="keyword">new</span> StringBuilder(<span class="string">&quot;&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            map[row[i]].Append(s[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        StringBuilder ans = <span class="keyword">new</span> StringBuilder(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> i <span class="keyword">in</span> map)</span><br><span class="line">        &#123;</span><br><span class="line">            ans.Append(i.Value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans.ToString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣0007——整数反转</title>
    <url>/2023/11/18/%E5%8A%9B%E6%89%A30007%E2%80%94%E2%80%94%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/</url>
    <content><![CDATA[<h1><a href="https://leetcode.cn/problems/reverse-integer/">整数反转</a></h1>
<p>难度：<strong>中等</strong></p>
<h2 id="题目描述">题目描述</h2>
<p>给你一个 32 位的有符号整数 <code>x</code> ，返回将 <code>x</code> 中的数字部分反转后的结果。<br>
如果反转后整数超过 32 位的有符号整数的范围 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mtext>−</mtext><msup><mn>2</mn><mn>31</mn></msup><mo separator="true">,</mo><msup><mn>2</mn><mn>31</mn></msup><mtext>−</mtext><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[−2^{31}, 2^{31}− 1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mord">−</span><span class="mord">1</span><span class="mclose">]</span></span></span></span> ，就返回 0。<br>
<strong>假设环境不允许存储 64 位整数（有符号或无符号）。</strong></p>
<h2 id="示例1">示例1</h2>
<blockquote>
<p><strong>输入</strong>：x = 123<br>
<strong>输出</strong>：321</p>
</blockquote>
<h2 id="示例2">示例2</h2>
<blockquote>
<p><strong>输入</strong>：x = -123<br>
<strong>输出</strong>：-321</p>
</blockquote>
<h2 id="示例3">示例3</h2>
<blockquote>
<p><strong>输入</strong>：x = 120<br>
<strong>输出</strong>：21</p>
</blockquote>
<h2 id="示例4">示例4</h2>
<blockquote>
<p><strong>输入</strong>：x = 0<br>
<strong>输出</strong>：0</p>
</blockquote>
<h2 id="题解">题解</h2>
<p>先定义两个常量，一个最大<code>MAX</code>，一个最小<code>MIN</code>，因为要反转，所以要判断是否会越界，最大值为<code>2147483647</code>，最小值为<code>-2147483648</code>，所以当反转的时候要注意不要越界</p>
<h2 id="想法代码">想法代码</h2>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">int</span> MAX = <span class="built_in">int</span>.MaxValue / <span class="number">10</span>, MIN = <span class="built_in">int</span>.MinValue / <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> x = <span class="number">4321</span>;</span><br><span class="line">        Console.WriteLine(Reverse(x));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> <span class="title">Reverse</span>(<span class="params"><span class="built_in">int</span> x</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> reversed = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (x != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> lastDigit = x % <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span> (reversed &gt; MAX || reversed &lt; MIN)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (reversed == MAX &amp;&amp; lastDigit &gt; <span class="number">7</span> || reversed == MIN &amp;&amp; lastDigit &lt; <span class="number">-8</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            reversed = reversed * <span class="number">10</span> + lastDigit;</span><br><span class="line">            x /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> reversed;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣0008——字符串转换整数</title>
    <url>/2023/11/18/%E5%8A%9B%E6%89%A30008%E2%80%94%E2%80%94%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2%E6%95%B4%E6%95%B0/</url>
    <content><![CDATA[<h1><a href="https://leetcode.cn/problems/string-to-integer-atoi/">字符串转换整数</a></h1>
<p>难度：<strong>中等</strong></p>
<h2 id="题目描述">题目描述</h2>
<p>请你来实现一个 <code>myAtoi(string s)</code> 函数，使其能将字符串转换成一个 32 位有符号整数（类似 C/C++ 中的 <code>atoi</code> 函数）。<br>
函数 <code>myAtoi(string s)</code> 的算法如下：</p>
<ol>
<li>读入字符串并丢弃无用的前导空格</li>
<li>检查下一个字符（假设还未到字符末尾）为正还是负号，读取该字符（如果有）。 确定最终结果是负数还是正数。 如果两者都不存在，则假定结果为正。</li>
<li>读入下一个字符，直到到达下一个非数字字符或到达输入的结尾。字符串的其余部分将被忽略。</li>
<li>将前面步骤读入的这些数字转换为整数（即，“123” -&gt; 123， “0032” -&gt; 32）。如果没有读入数字，则整数为 <code>0</code> 。必要时更改符号（从步骤 2 开始）。</li>
<li>如果整数数超过 32 位有符号整数范围 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mtext>−</mtext><msup><mn>2</mn><mn>31</mn></msup><mo separator="true">,</mo><msup><mn>2</mn><mn>31</mn></msup><mtext>−</mtext><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[−2^{31}, 2^{31}− 1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mord">−</span><span class="mord">1</span><span class="mclose">]</span></span></span></span> ，需要截断这个整数，使其保持在这个范围内。具体来说，小于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>−</mtext><msup><mn>2</mn><mn>31</mn></msup></mrow><annotation encoding="application/x-tex">−2^{31}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span> 的整数应该被固定为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>−</mtext><msup><mn>2</mn><mn>31</mn></msup></mrow><annotation encoding="application/x-tex">−2^{31}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span> ，大于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>31</mn></msup><mtext>−</mtext><mn>1</mn></mrow><annotation encoding="application/x-tex">2^{31}− 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mord">−</span><span class="mord">1</span></span></span></span> 的整数应该被固定为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>31</mn></msup><mtext>−</mtext><mn>1</mn></mrow><annotation encoding="application/x-tex">2^{31}− 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mord">−</span><span class="mord">1</span></span></span></span> 。</li>
<li>返回整数作为最终结果。</li>
</ol>
<p><strong>注意：</strong></p>
<ul>
<li>本题中的空白字符只包括空格字符 <code>' '</code> 。</li>
<li>除前导空格或数字后的其余字符串外，<strong>请勿忽略</strong> 任何其他字符。</li>
</ul>
<h2 id="示例1">示例1</h2>
<blockquote>
<p><strong>输入</strong>：s = &quot;   -42&quot;<br>
<strong>输出</strong>：-42</p>
</blockquote>
<h2 id="示例2">示例2</h2>
<blockquote>
<p><strong>输入</strong>：s = “42”<br>
<strong>输出</strong>：42</p>
</blockquote>
<h2 id="示例3">示例3</h2>
<blockquote>
<p><strong>输入</strong>：s = “4193 with words”<br>
<strong>输出</strong>：4193</p>
</blockquote>
<h2 id="题解">题解</h2>
<p>先遍历字符，将空格过滤，之后判断是否将字符串遍历完，如果遍历到最后一位，则返回0。如果没有遍历完，就继续像下面比对，若没有数字，则返回0。如果有数字，则对它进行进位运算，如果之后有最大值上越界，则返回<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>31</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^{31}-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，若下越界，则返回 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><msup><mn>2</mn><mn>31</mn></msup></mrow><annotation encoding="application/x-tex">- 2^{31}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span>，如果没有，则可以直接计算后返回</p>
<h2 id="想法代码">想法代码</h2>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Solution</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params">String[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> s = <span class="string">&quot;4193 with words&quot;</span>;</span><br><span class="line">        Console.WriteLine(MyAtoi(s));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> <span class="title">MyAtoi</span>(<span class="params"><span class="built_in">string</span> s</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> length = s.Length;</span><br><span class="line">        <span class="built_in">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (index &lt; length &amp;&amp; s[index] == <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (index == length)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">int</span> sign = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (s[index] == <span class="string">&#x27;+&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (s[index] == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            sign = <span class="number">-1</span>;</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> <span class="built_in">int</span> MAX = <span class="built_in">int</span>.MaxValue / <span class="number">10</span>;</span><br><span class="line">        <span class="built_in">int</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (index &lt; length &amp;&amp; <span class="built_in">char</span>.IsDigit(s[index]))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> digit = s[index] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span> (num &gt; MAX || num &lt; -MAX)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> sign &gt; <span class="number">0</span> ? <span class="built_in">int</span>.MaxValue : <span class="built_in">int</span>.MinValue;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (num == MAX)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (sign &gt; <span class="number">0</span> &amp;&amp; digit &gt; <span class="number">7</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="built_in">int</span>.MaxValue;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (sign &lt; <span class="number">0</span> &amp;&amp; digit &gt; <span class="number">8</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="built_in">int</span>.MinValue;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            num = num * <span class="number">10</span> + digit;</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> num * sign;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
</search>
